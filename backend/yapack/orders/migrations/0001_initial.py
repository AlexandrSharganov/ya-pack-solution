# Generated by Django 4.2.2 on 2023-06-06 23:38

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0003_alter_packer_packer_num'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cargotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cargotype_id', models.IntegerField(db_index=True, help_text='id карготипа', unique=True, verbose_name='id карготипа')),
                ('description', models.CharField(db_index=True, help_text='Описание', max_length=200, unique=True, verbose_name='Описание карготипа')),
            ],
            options={
                'verbose_name': 'Карготип',
                'verbose_name_plural': 'Карготипы',
                'ordering': ['cargotype_id'],
            },
        ),
        migrations.CreateModel(
            name='Carton',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=7, verbose_name='Название типа упаковки.')),
                ('length', models.FloatField(help_text='Длина товара', validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Размер не может быть больше 10000')], verbose_name='Длина')),
                ('width', models.FloatField(help_text='Ширина товара', validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Размер не может быть больше 10000')], verbose_name='Ширина')),
                ('height', models.FloatField(help_text='Высота товара', validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Размер не может быть больше 10000')], verbose_name='Высота')),
                ('price', models.FloatField(help_text='Цена товара', validators=[django.core.validators.MinValueValidator(0.0, message='Цена не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Цена не может быть больше 10000')], verbose_name='Цена')),
            ],
        ),
        migrations.CreateModel(
            name='Sku',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku_id', models.CharField(db_index=True, help_text='id товара', max_length=200, unique=True, verbose_name='id товара')),
                ('dimension_a', models.FloatField(help_text='Размер товара a', validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Размер не может быть больше 10000')], verbose_name='Размер a')),
                ('dimension_b', models.FloatField(help_text='Размер товара b', validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Размер не может быть больше 10000')], verbose_name='Размер b')),
                ('dimension_c', models.FloatField(help_text='Размер товара c', validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Размер не может быть больше 10000')], verbose_name='Размер c')),
                ('sku_wght', models.FloatField(help_text='Вес товара', validators=[django.core.validators.MinValueValidator(0.0, message='Вес не может быть меньше нуля'), django.core.validators.MaxValueValidator(10000.0, message='Вес не может быть больше 10000')], verbose_name='Вес')),
                ('cargotypes', models.ManyToManyField(help_text='Карготипы', related_name='sku', to='orders.cargotype', verbose_name='Карготипы')),
            ],
            options={
                'verbose_name': 'SKU',
                'verbose_name_plural': 'Номенклатура',
                'ordering': ['sku_id'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_key', models.CharField(db_index=True, help_text='id заказа', max_length=200, unique=True, verbose_name='id заказа')),
                ('count', models.PositiveIntegerField(help_text='Количество', validators=[django.core.validators.MinValueValidator(1, message='Количество не может быть меньше 1')], verbose_name='Количество SKU')),
                ('packman_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.packer', verbose_name='Упаковщик')),
                ('recommended_carton', models.ManyToManyField(related_name='recommended_carton', to='orders.carton', verbose_name='Рекомендуемая упаковка')),
                ('selected_carton', models.ManyToManyField(related_name='selected_carton', to='orders.carton', verbose_name='Использованная упаковка')),
                ('sku', models.ManyToManyField(related_name='ordersreceived', to='orders.sku', verbose_name='SKU')),
            ],
        ),
    ]
